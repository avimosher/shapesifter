if (typeof define !== 'function'){
    var define=require('amdefine')(module);
}

define(['underscore','mathjs','random_helpers'],function(_,math,random_helpers){
    return {handle: function(node,structureNodes,forceNodes){
        var links=node['links'];
        var subnodes=[];
        var structure1=structureNodes[node['structure1']];
        // todo: correctly handle rotations with offsets
        var position=math.add(structure1['position'],node['offset1']);

        var constraints=[];
        var distance=math.sqrt(node['link_offset'].reduce(x => x*x));
        var collisionExtent=0;
        var subnodeOffset=0;
        if(node['collision_extent']){
            collisionExtent=node['collision_extent'];
            subnodeOffset=collisionExtent+node['link_radius'];
        }

        for(var i=0;i<links;i++){
            var subnode={};
            position=math.add(position,math.add(node['link_offset'],[0,0,collisionExtent]));
            subnode['type']='RIGID_STRUCTURE';
            subnode['radius']=node['link_radius'];
            subnode['position']=position;
            position=math.add(position,[0,0,collisionExtent]);
            subnode['name']=random_helpers.name();
            subnode['collision_extent']=collisionExtent;
            subnodes.push(subnode);
            structureNodes[subnode['name']]=subnode;
        }


        constraints.push({'structure1': node['structure1'],
                          'offset1': node['offset1'],
                          'structure2': subnodes[0]['name'],
                          'offset2': [0,0,-subnodeOffset],
                          'distance': distance});
        constraints.push({'structure1': subnodes[subnodes.length-1]['name'],
                          'offset1': [0,0,subnodeOffset],
                          'structure2': node['structure2'],
                          'offset2': node['offset2'],
                          'distance': distance});
        structureNodes[node['structure2']]['position']=math.add(position,math.add([0,0,collisionExtent],math.subtract(node['link_offset'],node['offset2'])));
        for(var i=1;i<links;i++){
            constraints.push({'structure1': subnodes[i-1]['name'],
                              'offset1': [0,0,subnodeOffset],
                              'structure2': subnodes[i]['name'],
                              'offset2': [0,0,-subnodeOffset],
                              'distance': distance});}
        constraint={'type': 'RELATIVE_POSITION_CONSTRAINT','constraints': constraints};
        forceNodes.push(constraint);
    }}});
