import os
import json

Import('env')

ignore=[]

def Find_Directories(find_filter_function=None):
    directory=Dir('.').srcnode().abspath
    directories=filter(lambda x: os.path.isdir(os.path.join(directory,x)),os.listdir(directory))
    if find_filter_function==None: return directories
    else: return filter(find_filter_function,directories)

directories=Find_Directories(lambda x: x not in ignore)

def Automatic_Object_Helper(env,source):
    builder=env.SharedObject
    return builder(target=os.path.splitext(source)[0],source=source)

def Automatic_Objects(env,sources):
    if type(sources)==list:
        return [Automatic_Object_Helper(env,source) for source in sources]
    else:
        return Automatic_Object_Helper(env,sources)

def Find_Sources(dirs,sources=[],ignore=[]):
    local_sources=sources[:]
    def source_filter(test_file,ignore):
        if test_file.startswith('#') or (test_file.startswith('.') and not test_file.startswith('./')): return False
        test_results=map(lambda x: not test_file.endswith(x),ignore)
        return (test_file.endswith('.h') or test_file.endswith('.cpp')) and reduce(lambda x,y: x and y,test_results,True)
    build_directory=Dir('.').srcnode().abspath;build_directory_length=len(build_directory)+1
    for subdir in dirs:
        for root,dirs,files in os.walk(os.path.join(build_directory,subdir)):
            modified_root=root[build_directory_length:]
            local_sources.extend(filter(lambda filename: source_filter(filename,ignore),map(lambda file: os.path.join(modified_root,file),files)))
    cpps=filter(lambda s:s.endswith('.cpp'),local_sources)
    headers=filter(lambda s:s.endswith('.h'),local_sources)
    return cpps,headers

def Sublibrary(env,name):
    cpps,headers=Find_Sources([name])
    objects=Automatic_Objects(env,cpps)
    env.Library(target=name,source=objects)

for d in directories:
    Sublibrary(env,d)
